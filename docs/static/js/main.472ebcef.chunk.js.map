{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensage","className","Formulario","setMainSearch","useState","search","setSearch","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","mainsearch","setImagenes","paginaactual","setPaginaactual","totalpaginas","setTotalpaginas","useEffect","a","imagesPerPAge","strSearch","replaceAll","url","encodeURI","fetch","respuesta","json","hits","totalHits","calcTotalPages","Math","ceil","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.472ebcef.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({mensage}) => {\r\n    return (\r\n        <p className=\" my-3 p-4 text-center alert alert-primary\">\r\n            {mensage}\r\n        </p>\r\n    )\r\n}\r\n\r\nError.propTypes = {\r\n    mensage: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error\r\n","import React, { useState } from 'react'\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({setMainSearch}) => {\r\n\r\n    // Set search state \r\n    const [search, setSearch] = useState('');\r\n    const [error, setError] = useState(false)\r\n\r\n    // handle query input \r\n    const handleChange = ( { target } ) => {\r\n        \r\n        setSearch(target.value)\r\n\r\n    }\r\n    \r\n\r\n    //handle Submit Form\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        \r\n        // Field Validation\r\n        if(search.trim() === ''){\r\n            setError(true)\r\n            return;\r\n           \r\n        }\r\n\r\n        //Send the result to the main component\r\n        setError(false)\r\n        setMainSearch( search )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form\r\n            onSubmit={ handleSubmit }\r\n        >\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Busca una imagen, ejemplo: futbol o plantas\"                      \r\n                        onChange={ handleChange }\r\n                        value={search}\r\n                        \r\n                    />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Buscar\"\r\n                        \r\n                    />\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n            \r\n            {\r\n                error ? <Error mensage=\"Agrega un término de búsqueda\"/> : null\r\n            }\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    setMainSearch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Imagen = ({imagen}) => {\r\n\r\n    //extraer las variables del objeto imagen\r\n    const { largeImageURL, likes, previewURL, tags, views} = imagen\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img\r\n                    className=\"card-img-top\"\r\n                    src={ previewURL }\r\n                    alt= { tags }\r\n                />\r\n\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Me Gusta</p>\r\n                    <p className=\"card-text\">{views} Vistas</p>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                    <a \r\n                        href={largeImageURL}\r\n                        className=\"btn btn-primary btn-block\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    >\r\n                        Ver Imagen\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nImagen.propTypes = {\r\n    imagen: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Imagen\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Imagen from './Imagen'\r\n\r\nconst ListadoImagenes = ({imagenes}) => {\r\n    return (\r\n        <div className=\"col-12 p-5 row\">\r\n            {imagenes.map( imagen =>(\r\n                <Imagen\r\n                    imagen={imagen}\r\n                    key={imagen.id}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nListadoImagenes.propTypes = {\r\n    imagenes: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ListadoImagenes\r\n","import React, { useEffect, useState } from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImagenes from './components/ListadoImagenes';\n\n\n\n\nfunction App() {\n\n  const [mainsearch, setMainSearch] = useState('')\n  const [imagenes, setImagenes] = useState([])\n\n  //State del paginador\n  const [paginaactual, setPaginaactual] = useState(1)\n  const [totalpaginas, setTotalpaginas] = useState(1)\n\n  useEffect(() => {\n    \n    if(mainsearch==='') return;\n\n    const consultarApi = async()=>{\n\n      const imagesPerPAge= 30;\n      const strSearch= mainsearch.replaceAll(' ', '+')\n      const apikey= '18475571-b8d1a76b98fead1be0406a5bc';\n      const url = `https://pixabay.com/api/?key=${encodeURI(apikey)}&q=${strSearch}&per_page=${encodeURI(imagesPerPAge)}&image_type=photo&order=popular&page=${paginaactual}`;\n\n      const respuesta = await fetch(url);\n      const {hits, totalHits} = await respuesta.json()\n\n      setImagenes(hits);\n\n      //Calcular total de páginas\n      const calcTotalPages= Math.ceil(totalHits/imagesPerPAge)\n      setTotalpaginas(calcTotalPages)\n\n      //mover la pantalla hacia arriba\n      const jumbotron = document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({behavior: 'smooth'})\n\n      \n\n    }\n\n    consultarApi()\n\n  }, [mainsearch,paginaactual])\n\n  //restablecer la página actual si hay una búsqueda nueva\n  useEffect(() => {\n    setPaginaactual(1)\n  }, [mainsearch])\n\n  // definir pagina Anterior\n  const paginaAnterior = () =>{\n\n    let nuevaPaginaActual= paginaactual - 1 \n\n    if(nuevaPaginaActual===0) return;\n    \n    setPaginaactual(nuevaPaginaActual)\n  }\n\n  // definir pagina Siguiente\n  const paginaSiguiente = () =>{\n    let nuevaPaginaActual= paginaactual + 1 \n\n    if(nuevaPaginaActual > totalpaginas) return;\n    \n    setPaginaactual(nuevaPaginaActual)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Imágenes</p>\n        <Formulario\n          setMainSearch={setMainSearch}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImagenes\n          imagenes={imagenes}\n        />\n        {\n          paginaactual === 1 \n          ?\n            null\n          :\n            <button\n              className=\"btn btn-info mr-1\"\n              type=\"button\"\n              onClick={ paginaAnterior }\n            >&laquo; Anterior</button>\n        }\n\n        {\n          paginaactual === totalpaginas \n          ?\n            null\n          :\n            <button\n              className=\"btn btn-info \"\n              type=\"button\"\n              onClick={ paginaSiguiente }\n            >Siguiente &raquo;</button>\n        }\n\n\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}